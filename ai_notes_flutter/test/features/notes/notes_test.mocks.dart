// Mocks generated by Mockito 5.4.5 from annotations
// in ai_notes_flutter/test/features/notes/notes_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ai_notes_flutter/core/error/failures.dart' as _i5;
import 'package:ai_notes_flutter/features/notes/domain/entities/note.dart'
    as _i6;
import 'package:ai_notes_flutter/features/notes/domain/repositories/notes_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i3.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>> getNotes({
    String? userId,
    _i6.NoteStatus? status,
    _i6.NoteType? type,
    List<String>? tags,
    String? searchQuery,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotes,
          [],
          {
            #userId: userId,
            #status: status,
            #type: type,
            #tags: tags,
            #searchQuery: searchQuery,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Note>>(
          this,
          Invocation.method(
            #getNotes,
            [],
            {
              #userId: userId,
              #status: status,
              #type: type,
              #tags: tags,
              #searchQuery: searchQuery,
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Note>> getNoteById(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [noteId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>.value(
            _FakeEither_0<_i5.Failure, _i6.Note>(
          this,
          Invocation.method(
            #getNoteById,
            [noteId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Note>> createNote(_i6.Note? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [note],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>.value(
            _FakeEither_0<_i5.Failure, _i6.Note>(
          this,
          Invocation.method(
            #createNote,
            [note],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Note>> updateNote(_i6.Note? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [note],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>.value(
            _FakeEither_0<_i5.Failure, _i6.Note>(
          this,
          Invocation.method(
            #updateNote,
            [note],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteNote(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [noteId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteNote,
            [noteId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Note>> restoreNote(String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreNote,
          [noteId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>.value(
            _FakeEither_0<_i5.Failure, _i6.Note>(
          this,
          Invocation.method(
            #restoreNote,
            [noteId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Note>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> permanentlyDeleteNote(
          String? noteId) =>
      (super.noSuchMethod(
        Invocation.method(
          #permanentlyDeleteNote,
          [noteId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #permanentlyDeleteNote,
            [noteId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>> batchUpdateNotes(
    List<String>? noteIds,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchUpdateNotes,
          [
            noteIds,
            updates,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Note>>(
          this,
          Invocation.method(
            #batchUpdateNotes,
            [
              noteIds,
              updates,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>> searchNotes({
    required String? query,
    String? userId,
    List<String>? tags,
    _i6.NoteType? type,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchNotes,
          [],
          {
            #query: query,
            #userId: userId,
            #tags: tags,
            #type: type,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Note>>(
          this,
          Invocation.method(
            #searchNotes,
            [],
            {
              #query: query,
              #userId: userId,
              #tags: tags,
              #type: type,
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> getNoteTags(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNoteTags,
          [userId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #getNoteTags,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> syncNotes() => (super.noSuchMethod(
        Invocation.method(
          #syncNotes,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #syncNotes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> exportNotes({
    required List<String>? noteIds,
    required String? format,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportNotes,
          [],
          {
            #noteIds: noteIds,
            #format: format,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #exportNotes,
            [],
            {
              #noteIds: noteIds,
              #format: format,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>> importNotes({
    required String? filePath,
    required String? format,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #importNotes,
          [],
          {
            #filePath: filePath,
            #format: format,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Note>>(
          this,
          Invocation.method(
            #importNotes,
            [],
            {
              #filePath: filePath,
              #format: format,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Note>>>);
}
